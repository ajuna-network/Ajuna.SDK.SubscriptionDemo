//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using Ajuna.SDK.SubscriptionDemo.NetApi.Generated.Model.AjunaCommon;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Ajuna.SDK.SubscriptionDemo.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IRunnerStorage interface definition.
    /// </summary>
    public interface IRunnerStorage : IStorage
    {
        
        /// <summary>
        /// >> Runners
        ///  Stores a map of the runners with its configuration and state
        /// </summary>
        Ajuna.SDK.SubscriptionDemo.NetApi.Generated.Model.AjunaCommon.EnumRunnerState GetRunners(string key);
        
        /// <summary>
        /// >> Nonce
        ///  A nonce
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetNonce();
    }
    
    /// <summary>
    /// RunnerStorage class definition.
    /// </summary>
    public sealed class RunnerStorage : IRunnerStorage
    {
        
        /// <summary>
        /// _runnersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.SDK.SubscriptionDemo.NetApi.Generated.Model.AjunaCommon.EnumRunnerState> _runnersTypedStorage;
        
        /// <summary>
        /// _nonceTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _nonceTypedStorage;
        
        /// <summary>
        /// RunnerStorage constructor.
        /// </summary>
        public RunnerStorage(IStorageDataProvider storageDataProvider, IStorageChangeDelegate storageChangeDelegate)
        {
            this.RunnersTypedStorage = new TypedMapStorage<Ajuna.SDK.SubscriptionDemo.NetApi.Generated.Model.AjunaCommon.EnumRunnerState>("Runner.Runners", storageDataProvider, storageChangeDelegate);
            this.NonceTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Runner.Nonce", storageDataProvider, storageChangeDelegate);
        }
        
        /// <summary>
        /// _runnersTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.SDK.SubscriptionDemo.NetApi.Generated.Model.AjunaCommon.EnumRunnerState> RunnersTypedStorage
        {
            get
            {
                return _runnersTypedStorage;
            }
            set
            {
                _runnersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nonceTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> NonceTypedStorage
        {
            get
            {
                return _nonceTypedStorage;
            }
            set
            {
                _nonceTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await RunnersTypedStorage.InitializeAsync("Runner", "Runners");
            await NonceTypedStorage.InitializeAsync("Runner", "Nonce");
        }
        
        /// <summary>
        /// Implements any storage change for Runner.Runners
        /// </summary>
        [StorageChange("Runner", "Runners")]
        public void OnUpdateRunners(string key, string data)
        {
            RunnersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Runners
        ///  Stores a map of the runners with its configuration and state
        /// </summary>
        public Ajuna.SDK.SubscriptionDemo.NetApi.Generated.Model.AjunaCommon.EnumRunnerState GetRunners(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RunnersTypedStorage.Dictionary.TryGetValue(key, out Ajuna.SDK.SubscriptionDemo.NetApi.Generated.Model.AjunaCommon.EnumRunnerState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Runner.Nonce
        /// </summary>
        [StorageChange("Runner", "Nonce")]
        public void OnUpdateNonce(string data)
        {
            NonceTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Nonce
        ///  A nonce
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetNonce()
        {
            return NonceTypedStorage.Get();
        }
    }
}
